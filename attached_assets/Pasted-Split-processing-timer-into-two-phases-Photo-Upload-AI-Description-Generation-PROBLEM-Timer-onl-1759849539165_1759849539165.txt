Split processing timer into two phases: Photo Upload + AI Description Generation

PROBLEM: Timer only shows AI generation time, but actual process includes upload time first.

Reality:
- Phase 1: Upload photos (takes X seconds) - NOT TIMED
- Phase 2: AI generation (takes Y seconds) - CURRENTLY TIMED
- Total time = X + Y (double what's shown)

SOLUTION: Two-phase progress tracking with separate timers.

IMPLEMENTATION:

1. SPLIT INTO TWO PHASES:
```javascript
const processPhotosAndAI = async (photos) => {
  // PHASE 1: Upload photos
  await uploadPhase(photos);
  
  // PHASE 2: Generate AI descriptions
  await aiGenerationPhase(photos);
};

PHASE 1 - PHOTO UPLOAD WITH TIMER:

javascriptconst uploadPhase = async (photos) => {
  const uploadStartTime = Date.now();
  
  // Estimate: ~2-3 seconds per photo to upload
  const estimatedUploadTime = photos.length * 2.5;
  
  setProgress({
    phase: 'upload',
    title: 'Uploading Photos',
    current: 0,
    total: photos.length,
    timeRemaining: Math.ceil(estimatedUploadTime),
    message: 'Preparing your images...'
  });
  
  const uploadedUrls = [];
  
  for (let i = 0; i < photos.length; i++) {
    const photoStartTime = Date.now();
    
    // Update progress
    setProgress({
      phase: 'upload',
      title: 'Uploading Photos',
      current: i,
      total: photos.length,
      timeRemaining: calculateRemaining(uploadStartTime, i, photos.length, 2.5),
      message: `Uploading photo ${i + 1} of ${photos.length}...`
    });
    
    // Upload to Cloudinary or storage
    const url = await uploadPhoto(photos[i]);
    uploadedUrls.push(url);
    
    // Update with actual time
    const actualUploadTime = (Date.now() - photoStartTime) / 1000;
    
    setProgress({
      phase: 'upload',
      title: 'Uploading Photos',
      current: i + 1,
      total: photos.length,
      timeRemaining: calculateRemaining(uploadStartTime, i + 1, photos.length, actualUploadTime),
      message: `Photo ${i + 1} uploaded`
    });
  }
  
  return uploadedUrls;
};

PHASE 2 - AI GENERATION WITH TIMER:

javascriptconst aiGenerationPhase = async (photoUrls) => {
  const aiStartTime = Date.now();
  
  // Estimate: ~6 seconds per AI description
  const estimatedAITime = photoUrls.length * 6;
  
  setProgress({
    phase: 'ai',
    title: 'AI Generating Descriptions',
    current: 0,
    total: photoUrls.length,
    timeRemaining: Math.ceil(estimatedAITime),
    message: 'Analyzing your products with AI...'
  });
  
  const descriptions = [];
  
  for (let i = 0; i < photoUrls.length; i++) {
    setProgress({
      phase: 'ai',
      title: 'AI Generating Descriptions',
      current: i,
      total: photoUrls.length,
      timeRemaining: calculateRemaining(aiStartTime, i, photoUrls.length, 6),
      message: `Analyzing item ${i + 1} of ${photoUrls.length}...`
    });
    
    // Call OpenAI
    const aiResult = await generateAIDescription(photoUrls[i]);
    descriptions.push(aiResult);
    
    const actualAITime = (Date.now() - aiStartTime) / 1000 / (i + 1);
    
    setProgress({
      phase: 'ai',
      title: 'AI Generating Descriptions',
      current: i + 1,
      total: photoUrls.length,
      timeRemaining: calculateRemaining(aiStartTime, i + 1, photoUrls.length, actualAITime),
      message: `Item ${i + 1} analyzed`
    });
  }
  
  return descriptions;
};

DYNAMIC TIME CALCULATION HELPER:

javascriptconst calculateRemaining = (startTime, completedItems, totalItems, avgTimePerItem) => {
  if (completedItems === 0) return Math.ceil(totalItems * avgTimePerItem);
  
  // Calculate based on actual performance
  const elapsed = (Date.now() - startTime) / 1000;
  const actualAvgTime = elapsed / completedItems;
  const remainingItems = totalItems - completedItems;
  
  return Math.ceil(remainingItems * actualAvgTime);
};

TWO-PHASE PROGRESS UI:

javascriptconst ProcessingModal = ({ progress }) => {
  return (
    <div className="processing-modal">
      {/* Overall Progress */}
      <h2>Processing Your Listings</h2>
      
      {/* Phase Indicator */}
      <div className="phases">
        <div className={progress.phase === 'upload' ? 'active' : progress.phase === 'ai' ? 'complete' : ''}>
          <span>1. Upload Photos</span>
          {progress.phase === 'upload' && <span>‚è≥ In Progress</span>}
          {progress.phase === 'ai' && <span>‚úì Complete</span>}
        </div>
        
        <div className={progress.phase === 'ai' ? 'active' : ''}>
          <span>2. AI Analysis</span>
          {progress.phase === 'ai' && <span>‚è≥ In Progress</span>}
        </div>
      </div>
      
      {/* Current Phase Details */}
      <div className="current-phase">
        <h3>{progress.title}</h3>
        <p className="timer">‚è±Ô∏è {formatTime(progress.timeRemaining)} remaining</p>
        
        <div className="progress-bar">
          <div 
            className="progress-fill" 
            style={{ width: `${(progress.current / progress.total) * 100}%` }}
          />
        </div>
        
        <p className="status">
          {progress.message}
        </p>
        
        <p className="count">
          {progress.current} of {progress.total} complete
        </p>
      </div>
      
      {/* Smart Pricing Psychology tip (carousel) */}
      <div className="tips-carousel">
        {/* Your existing tips */}
      </div>
    </div>
  );
};

VISUAL EXAMPLE:

Phase 1 - Uploading:
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  Processing Your Listings                ‚îÇ
‚îÇ                                          ‚îÇ
‚îÇ  1. Upload Photos      ‚è≥ In Progress    ‚îÇ
‚îÇ  2. AI Analysis        ‚è∏ Waiting         ‚îÇ
‚îÇ                                          ‚îÇ
‚îÇ  Uploading Photos                        ‚îÇ
‚îÇ  ‚è±Ô∏è 0:12 remaining                       ‚îÇ
‚îÇ                                          ‚îÇ
‚îÇ  [‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë] 60%            ‚îÇ
‚îÇ                                          ‚îÇ
‚îÇ  Uploading photo 6 of 10...              ‚îÇ
‚îÇ  6 of 10 complete                        ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
Phase 2 - AI Generation:
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  Processing Your Listings                ‚îÇ
‚îÇ                                          ‚îÇ
‚îÇ  1. Upload Photos      ‚úì Complete        ‚îÇ
‚îÇ  2. AI Analysis        ‚è≥ In Progress    ‚îÇ
‚îÇ                                          ‚îÇ
‚îÇ  AI Generating Descriptions              ‚îÇ
‚îÇ  ‚è±Ô∏è 0:36 remaining                       ‚îÇ
‚îÇ                                          ‚îÇ
‚îÇ  [‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë] 40%            ‚îÇ
‚îÇ                                          ‚îÇ
‚îÇ  Analyzing item 4 of 10...               ‚îÇ
‚îÇ  4 of 10 complete                        ‚îÇ
‚îÇ                                          ‚îÇ
‚îÇ  üí° Smart Pricing Psychology              ‚îÇ
‚îÇ  Pricing at $99 instead of $100...       ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

ACCURATE TOTAL TIME ESTIMATE:

javascriptconst estimateTotalTime = (photoCount) => {
  const UPLOAD_TIME_PER_PHOTO = 2.5; // seconds
  const AI_TIME_PER_PHOTO = 6; // seconds
  
  const uploadTime = photoCount * UPLOAD_TIME_PER_PHOTO;
  const aiTime = photoCount * AI_TIME_PER_PHOTO;
  const totalTime = uploadTime + aiTime;
  
  return {
    uploadPhase: Math.ceil(uploadTime),
    aiPhase: Math.ceil(aiTime),
    total: Math.ceil(totalTime),
    formatted: formatTime(totalTime)
  };
};

// Show upfront
const estimates = estimateTotalTime(10);
console.log(`Total estimated time: ${estimates.formatted}`);
// "Total estimated time: 1:25"

COMPLETE FLOW:

javascriptconst handlePhotoProcessing = async (photos) => {
  try {
    setShowProgress(true);
    
    // Phase 1: Upload
    const uploadedUrls = await uploadPhase(photos);
    
    // Small delay between phases
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // Phase 2: AI Generation
    const aiDescriptions = await aiGenerationPhase(uploadedUrls);
    
    // Complete
    setShowProgress(false);
    showSuccessMessage('All items processed successfully!');
    
  } catch (error) {
    console.error('Processing failed:', error);
    showErrorMessage('Processing failed. Please try again.');
  }
};
BENEFITS:

Users see accurate total time (not half)
Clear indication of which phase is happening
Separate timers for each phase
Better UX - no surprise "it's taking longer than expected"
Users understand what's happening at each stage

Implement two-phase timer system now.
Test with 10 photos and verify timers are accurate for both phases.