Update timing calculations based on ACTUAL performance data:

REAL-WORLD TIMING (from user test):
- 14 photos uploaded
- 5 unique items detected (photos grouped)
- Total time: 4 minutes (240 seconds)

ACCURATE PHASE BREAKDOWN:

Since Phase 3 = Phase 1 + Phase 2, and total is 240 seconds:
- Phase 1 + Phase 2 = 120 seconds
- Phase 3 = 120 seconds
- Total = 240 seconds

Per-photo/per-item calculations:
- Phase 1 (Upload): 14 photos in ~60 seconds = **4.3 seconds per photo**
- Phase 2 (Analysis/Grouping): 14 photos in ~60 seconds = **4.3 seconds per photo**
- Phase 3 (Descriptions): 5 items in ~120 seconds = **24 seconds per item**

UPDATED TIMING CONFIG:
```javascript
const TIMING_CONFIG = {
  // Phase 1: Upload photos to storage
  UPLOAD_TIME_PER_PHOTO: 4.3, // seconds per photo
  
  // Phase 2: AI analysis and grouping similar images
  ANALYSIS_TIME_PER_PHOTO: 4.3, // seconds per photo
  
  // Phase 3: Generate detailed descriptions (this is per ITEM, not per photo)
  DESCRIPTION_TIME_PER_ITEM: 24, // seconds per unique item (much longer!)
  
  // Total formula:
  // (photos × 4.3) + (photos × 4.3) + (items × 24)
};

const calculateAccurateTiming = (photoCount, itemCount) => {
  const uploadTime = Math.ceil(photoCount * TIMING_CONFIG.UPLOAD_TIME_PER_PHOTO);
  const analysisTime = Math.ceil(photoCount * TIMING_CONFIG.ANALYSIS_TIME_PER_PHOTO);
  const descriptionTime = Math.ceil(itemCount * TIMING_CONFIG.DESCRIPTION_TIME_PER_ITEM);
  
  return {
    phase1: uploadTime,      // Based on PHOTO count
    phase2: analysisTime,    // Based on PHOTO count
    phase3: descriptionTime, // Based on ITEM count (after grouping)
    total: uploadTime + analysisTime + descriptionTime,
    formatted: formatTime(uploadTime + analysisTime + descriptionTime)
  };
};

// Example: 14 photos, 5 items
const timing = calculateAccurateTiming(14, 5);
// {
//   phase1: 60 seconds (14 photos × 4.3s)
//   phase2: 60 seconds (14 photos × 4.3s)
//   phase3: 120 seconds (5 items × 24s)
//   total: 240 seconds (4 minutes)
//   formatted: "4:00"
// }
KEY INSIGHT - TWO DIFFERENT COUNTS:
javascript// IMPORTANT: Phase 1 & 2 use PHOTO count
// Phase 3 uses ITEM count (after AI groups similar photos)

const [processingCounts, setProcessingCounts] = useState({
  totalPhotos: 14,      // User uploaded 14 photos
  uniqueItems: null,    // Unknown until Phase 2 completes
});

// After Phase 2 analysis completes, update item count
const onAnalysisComplete = (detectedItems) => {
  setProcessingCounts(prev => ({
    ...prev,
    uniqueItems: detectedItems.length // AI found 5 unique items
  }));
  
  // Recalculate Phase 3 time now that we know item count
  const phase3Time = detectedItems.length * TIMING_CONFIG.DESCRIPTION_TIME_PER_ITEM;
  setEstimatedPhase3Time(phase3Time);
};
DYNAMIC TIME ESTIMATION:
javascriptconst ProcessingFlow = ({ photos }) => {
  const [phase, setPhase] = useState('upload');
  const [itemCount, setItemCount] = useState(null);
  
  // Initial estimate based on photo count only
  const initialEstimate = {
    phase1: Math.ceil(photos.length * 4.3),
    phase2: Math.ceil(photos.length * 4.3),
    phase3: null, // Unknown until analysis complete
  };
  
  const [timeEstimate, setTimeEstimate] = useState(initialEstimate);
  
  const handleAnalysisComplete = (detectedItems) => {
    setItemCount(detectedItems.length);
    
    // NOW we can calculate Phase 3 time accurately
    const phase3Time = Math.ceil(detectedItems.length * 24);
    
    setTimeEstimate(prev => ({
      ...prev,
      phase3: phase3Time,
      total: prev.phase1 + prev.phase2 + phase3Time
    }));
  };
  
  return (
    <ProcessingModal 
      phase={phase}
      timeEstimate={timeEstimate}
      photoCount={photos.length}
      itemCount={itemCount}
    />
  );
};
SHOW UPDATED ESTIMATE AFTER PHASE 2:
javascriptconst AfterAnalysisMessage = ({ photoCount, itemCount }) => {
  const phase3Time = Math.ceil(itemCount * 24);
  
  return (
    <div className="analysis-complete-message">
      <div className="icon">✓</div>
      <h3>Analysis Complete!</h3>
      <p>
        Detected <strong>{itemCount} unique items</strong> from your {photoCount} photos
      </p>
      <p className="phase3-notice">
        Now generating detailed descriptions for {itemCount} items 
        (estimated {formatTime(phase3Time)})
      </p>
    </div>
  );
};
ACCURATE PROGRESS DISPLAY:
javascriptconst DescriptionProgress = ({ current, total }) => {
  const percent = Math.round((current / total) * 100);
  const remainingItems = total - current;
  const estimatedRemaining = Math.ceil(remainingItems * 24);
  
  return (
    <div className="description-progress">
      <h3>Generating Descriptions & Meta Tags</h3>
      <p>Processing item {current} of {total}</p>
      
      <div className="timing-info">
        <span className="icon">⏱️</span>
        <span>~24 seconds per item (most detailed phase)</span>
      </div>
      
      <div className="progress-bar">
        <div className="progress-fill" style={{ width: `${percent}%` }}>
          {percent}%
        </div>
      </div>
      
      <div className="progress-details">
        <span>{current} of {total} items complete</span>
        <span>{formatTime(estimatedRemaining)} remaining</span>
      </div>
      
      <div className="explanation">
        <p>
          Each description generation takes ~24 seconds because AI is:
        </p>
        <ul>
          <li>Writing professional titles</li>
          <li>Creating 2-3 sentence descriptions</li>
          <li>Selecting accurate categories</li>
          <li>Analyzing condition</li>
          <li>Suggesting competitive prices</li>
          <li>Generating SEO meta tags & keywords</li>
        </ul>
      </div>
    </div>
  );
};
EXAMPLE TIMING DISPLAY:
┌──────────────────────────────────────────┐
│  Processing 14 Photos                    │
│                                          │
│  Phase 1: Upload (14 photos)            │
│  Estimated: 1:00                         │
│                                          │
│  Phase 2: AI Analysis (14 photos)       │
│  Estimated: 1:00                         │
│                                          │
│  Phase 3: Generate Descriptions          │
│  Estimated: Will calculate after         │
│  analysis detects unique items...        │
│                                          │
│  Total: ~2:00 + Phase 3                  │
└──────────────────────────────────────────┘

After Phase 2 completes:

┌──────────────────────────────────────────┐
│  ✓ Detected 5 unique items!              │
│                                          │
│  Phase 3: Generate Descriptions          │
│  Estimated: 2:00 (5 items × 24s each)    │
│                                          │
│  Updated Total: 4:00                     │
└──────────────────────────────────────────┘
TIMING ACCURACY TABLE:
javascript// Real-world benchmarks:
const TIMING_BENCHMARKS = {
  // Based on actual test: 14 photos, 5 items, 4 minutes
  uploadPerPhoto: 4.3,     // Phase 1
  analysisPerPhoto: 4.3,   // Phase 2  
  descriptionPerItem: 24,  // Phase 3
  
  // Example calculations:
  examples: [
    {
      photos: 14,
      items: 5,
      phase1: 60,  // 14 × 4.3
      phase2: 60,  // 14 × 4.3
      phase3: 120, // 5 × 24
      total: 240   // 4:00
    },
    {
      photos: 20,
      items: 10,
      phase1: 86,  // 20 × 4.3
      phase2: 86,  // 20 × 4.3
      phase3: 240, // 10 × 24
      total: 412   // 6:52
    },
    {
      photos: 10,
      items: 8,
      phase1: 43,  // 10 × 4.3
      phase2: 43,  // 10 × 4.3
      phase3: 192, // 8 × 24
      total: 278   // 4:38
    }
  ]
};
UPDATE ALL TIMER DISPLAYS:

Phase 1 & 2: Base on photo count
Phase 3: Base on item count (after grouping)
Show updated total after Phase 2 completes
Make it clear Phase 3 takes ~24 seconds per item
Total time = (photos × 8.6) + (items × 24)

This matches your actual 4-minute timing for 14 photos / 5 items.
Implement accurate timing calculations now based on real-world performance data.